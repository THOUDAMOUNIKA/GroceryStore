{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5000/api/auth';\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      this.currentUserSubject.next(JSON.parse(storedUser));\n    }\n  }\n  register(request) {\n    return this.http.post(`${this.apiUrl}/register`, request).pipe(tap(user => this.setCurrentUser(user)));\n  }\n  login(request) {\n    return this.http.post(`${this.apiUrl}/login`, request).pipe(tap(user => this.setCurrentUser(user)));\n  }\n  logout() {\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n  }\n  setCurrentUser(user) {\n    localStorage.setItem('currentUser', JSON.stringify(user));\n    this.currentUserSubject.next(user);\n  }\n  get currentUserValue() {\n    return this.currentUserSubject.value;\n  }\n  get isLoggedIn() {\n    return !!this.currentUserValue;\n  }\n  getToken() {\n    return this.currentUserValue?.token || null;\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","AuthService","constructor","http","apiUrl","currentUserSubject","currentUser$","asObservable","storedUser","localStorage","getItem","next","JSON","parse","register","request","post","pipe","user","setCurrentUser","login","logout","removeItem","setItem","stringify","currentUserValue","value","isLoggedIn","getToken","token","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\GroceryStore\\FrontEnd\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\nimport { User, LoginRequest, RegisterRequest } from '../models/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:5000/api/auth';\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\n  public currentUser$ = this.currentUserSubject.asObservable();\n\n  constructor(private http: HttpClient) {\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      this.currentUserSubject.next(JSON.parse(storedUser));\n    }\n  }\n\n  register(request: RegisterRequest): Observable<User> {\n    return this.http.post<User>(`${this.apiUrl}/register`, request)\n      .pipe(tap(user => this.setCurrentUser(user)));\n  }\n\n  login(request: LoginRequest): Observable<User> {\n    return this.http.post<User>(`${this.apiUrl}/login`, request)\n      .pipe(tap(user => this.setCurrentUser(user)));\n  }\n\n  logout(): void {\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n  }\n\n  private setCurrentUser(user: User): void {\n    localStorage.setItem('currentUser', JSON.stringify(user));\n    this.currentUserSubject.next(user);\n  }\n\n  get currentUserValue(): User | null {\n    return this.currentUserSubject.value;\n  }\n\n  get isLoggedIn(): boolean {\n    return !!this.currentUserValue;\n  }\n\n  getToken(): string | null {\n    return this.currentUserValue?.token || null;\n  }\n}"],"mappings":"AAEA,SAASA,eAAe,EAAcC,GAAG,QAAQ,MAAM;;;AAMvD,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJhB,KAAAC,MAAM,GAAG,gCAAgC;IACzC,KAAAC,kBAAkB,GAAG,IAAIN,eAAe,CAAc,IAAI,CAAC;IAC5D,KAAAO,YAAY,GAAG,IAAI,CAACD,kBAAkB,CAACE,YAAY,EAAE;IAG1D,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACtD,IAAIF,UAAU,EAAE;MACd,IAAI,CAACH,kBAAkB,CAACM,IAAI,CAACC,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC,CAAC;;EAExD;EAEAM,QAAQA,CAACC,OAAwB;IAC/B,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAO,GAAG,IAAI,CAACZ,MAAM,WAAW,EAAEW,OAAO,CAAC,CAC5DE,IAAI,CAACjB,GAAG,CAACkB,IAAI,IAAI,IAAI,CAACC,cAAc,CAACD,IAAI,CAAC,CAAC,CAAC;EACjD;EAEAE,KAAKA,CAACL,OAAqB;IACzB,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAO,GAAG,IAAI,CAACZ,MAAM,QAAQ,EAAEW,OAAO,CAAC,CACzDE,IAAI,CAACjB,GAAG,CAACkB,IAAI,IAAI,IAAI,CAACC,cAAc,CAACD,IAAI,CAAC,CAAC,CAAC;EACjD;EAEAG,MAAMA,CAAA;IACJZ,YAAY,CAACa,UAAU,CAAC,aAAa,CAAC;IACtC,IAAI,CAACjB,kBAAkB,CAACM,IAAI,CAAC,IAAI,CAAC;EACpC;EAEQQ,cAAcA,CAACD,IAAU;IAC/BT,YAAY,CAACc,OAAO,CAAC,aAAa,EAAEX,IAAI,CAACY,SAAS,CAACN,IAAI,CAAC,CAAC;IACzD,IAAI,CAACb,kBAAkB,CAACM,IAAI,CAACO,IAAI,CAAC;EACpC;EAEA,IAAIO,gBAAgBA,CAAA;IAClB,OAAO,IAAI,CAACpB,kBAAkB,CAACqB,KAAK;EACtC;EAEA,IAAIC,UAAUA,CAAA;IACZ,OAAO,CAAC,CAAC,IAAI,CAACF,gBAAgB;EAChC;EAEAG,QAAQA,CAAA;IACN,OAAO,IAAI,CAACH,gBAAgB,EAAEI,KAAK,IAAI,IAAI;EAC7C;;;uBA1CW5B,WAAW,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXhC,WAAW;MAAAiC,OAAA,EAAXjC,WAAW,CAAAkC,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}